// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Staff is an object representing the database table.
type Staff struct {
	StaffID   int         `boil:"staff_id" json:"staff_id" toml:"staff_id" yaml:"staff_id"`
	FirstName string      `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName  string      `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	Email     string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Phone     null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	Active    int         `boil:"active" json:"active" toml:"active" yaml:"active"`
	StoreID   int         `boil:"store_id" json:"store_id" toml:"store_id" yaml:"store_id"`
	ManagerID null.Int    `boil:"manager_id" json:"manager_id,omitempty" toml:"manager_id" yaml:"manager_id,omitempty"`

	R *staffR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L staffL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StaffColumns = struct {
	StaffID   string
	FirstName string
	LastName  string
	Email     string
	Phone     string
	Active    string
	StoreID   string
	ManagerID string
}{
	StaffID:   "staff_id",
	FirstName: "first_name",
	LastName:  "last_name",
	Email:     "email",
	Phone:     "phone",
	Active:    "active",
	StoreID:   "store_id",
	ManagerID: "manager_id",
}

var StaffTableColumns = struct {
	StaffID   string
	FirstName string
	LastName  string
	Email     string
	Phone     string
	Active    string
	StoreID   string
	ManagerID string
}{
	StaffID:   "staffs.staff_id",
	FirstName: "staffs.first_name",
	LastName:  "staffs.last_name",
	Email:     "staffs.email",
	Phone:     "staffs.phone",
	Active:    "staffs.active",
	StoreID:   "staffs.store_id",
	ManagerID: "staffs.manager_id",
}

// Generated where

var StaffWhere = struct {
	StaffID   whereHelperint
	FirstName whereHelperstring
	LastName  whereHelperstring
	Email     whereHelperstring
	Phone     whereHelpernull_String
	Active    whereHelperint
	StoreID   whereHelperint
	ManagerID whereHelpernull_Int
}{
	StaffID:   whereHelperint{field: "\"staffs\".\"staff_id\""},
	FirstName: whereHelperstring{field: "\"staffs\".\"first_name\""},
	LastName:  whereHelperstring{field: "\"staffs\".\"last_name\""},
	Email:     whereHelperstring{field: "\"staffs\".\"email\""},
	Phone:     whereHelpernull_String{field: "\"staffs\".\"phone\""},
	Active:    whereHelperint{field: "\"staffs\".\"active\""},
	StoreID:   whereHelperint{field: "\"staffs\".\"store_id\""},
	ManagerID: whereHelpernull_Int{field: "\"staffs\".\"manager_id\""},
}

// StaffRels is where relationship names are stored.
var StaffRels = struct {
	Manager       string
	Store         string
	Orders        string
	ManagerStaffs string
}{
	Manager:       "Manager",
	Store:         "Store",
	Orders:        "Orders",
	ManagerStaffs: "ManagerStaffs",
}

// staffR is where relationships are stored.
type staffR struct {
	Manager       *Staff     `boil:"Manager" json:"Manager" toml:"Manager" yaml:"Manager"`
	Store         *Store     `boil:"Store" json:"Store" toml:"Store" yaml:"Store"`
	Orders        OrderSlice `boil:"Orders" json:"Orders" toml:"Orders" yaml:"Orders"`
	ManagerStaffs StaffSlice `boil:"ManagerStaffs" json:"ManagerStaffs" toml:"ManagerStaffs" yaml:"ManagerStaffs"`
}

// NewStruct creates a new relationship struct
func (*staffR) NewStruct() *staffR {
	return &staffR{}
}

// staffL is where Load methods for each relationship are stored.
type staffL struct{}

var (
	staffAllColumns            = []string{"staff_id", "first_name", "last_name", "email", "phone", "active", "store_id", "manager_id"}
	staffColumnsWithoutDefault = []string{"staff_id", "first_name", "last_name", "email", "phone", "active", "store_id", "manager_id"}
	staffColumnsWithDefault    = []string{}
	staffPrimaryKeyColumns     = []string{"staff_id"}
)

type (
	// StaffSlice is an alias for a slice of pointers to Staff.
	// This should almost always be used instead of []Staff.
	StaffSlice []*Staff

	staffQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	staffType                 = reflect.TypeOf(&Staff{})
	staffMapping              = queries.MakeStructMapping(staffType)
	staffPrimaryKeyMapping, _ = queries.BindMapping(staffType, staffMapping, staffPrimaryKeyColumns)
	staffInsertCacheMut       sync.RWMutex
	staffInsertCache          = make(map[string]insertCache)
	staffUpdateCacheMut       sync.RWMutex
	staffUpdateCache          = make(map[string]updateCache)
	staffUpsertCacheMut       sync.RWMutex
	staffUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single staff record from the query.
func (q staffQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Staff, error) {
	o := &Staff{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for staffs")
	}

	return o, nil
}

// All returns all Staff records from the query.
func (q staffQuery) All(ctx context.Context, exec boil.ContextExecutor) (StaffSlice, error) {
	var o []*Staff

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Staff slice")
	}

	return o, nil
}

// Count returns the count of all Staff records in the query.
func (q staffQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count staffs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q staffQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if staffs exists")
	}

	return count > 0, nil
}

// Manager pointed to by the foreign key.
func (o *Staff) Manager(mods ...qm.QueryMod) staffQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"staff_id\" = ?", o.ManagerID),
	}

	queryMods = append(queryMods, mods...)

	query := Staffs(queryMods...)
	queries.SetFrom(query.Query, "\"staffs\"")

	return query
}

// Store pointed to by the foreign key.
func (o *Staff) Store(mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"store_id\" = ?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	query := Stores(queryMods...)
	queries.SetFrom(query.Query, "\"stores\"")

	return query
}

// Orders retrieves all the order's Orders with an executor.
func (o *Staff) Orders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"staff_id\"=?", o.StaffID),
	)

	query := Orders(queryMods...)
	queries.SetFrom(query.Query, "\"orders\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"orders\".*"})
	}

	return query
}

// ManagerStaffs retrieves all the staff's Staffs with an executor via manager_id column.
func (o *Staff) ManagerStaffs(mods ...qm.QueryMod) staffQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"staffs\".\"manager_id\"=?", o.StaffID),
	)

	query := Staffs(queryMods...)
	queries.SetFrom(query.Query, "\"staffs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"staffs\".*"})
	}

	return query
}

// LoadManager allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (staffL) LoadManager(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		if !queries.IsNil(object.ManagerID) {
			args = append(args, object.ManagerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ManagerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ManagerID) {
				args = append(args, obj.ManagerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`staffs`),
		qm.WhereIn(`staffs.staff_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Staff")
	}

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Staff")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for staffs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staffs")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Manager = foreign
		if foreign.R == nil {
			foreign.R = &staffR{}
		}
		foreign.R.ManagerStaffs = append(foreign.R.ManagerStaffs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ManagerID, foreign.StaffID) {
				local.R.Manager = foreign
				if foreign.R == nil {
					foreign.R = &staffR{}
				}
				foreign.R.ManagerStaffs = append(foreign.R.ManagerStaffs, local)
				break
			}
		}
	}

	return nil
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (staffL) LoadStore(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args = append(args, object.StoreID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if a == obj.StoreID {
					continue Outer
				}
			}

			args = append(args, obj.StoreID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stores`),
		qm.WhereIn(`stores.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stores")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Store = foreign
		if foreign.R == nil {
			foreign.R = &storeR{}
		}
		foreign.R.Staffs = append(foreign.R.Staffs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StoreID == foreign.StoreID {
				local.R.Store = foreign
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.Staffs = append(foreign.R.Staffs, local)
				break
			}
		}
	}

	return nil
}

// LoadOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffL) LoadOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args = append(args, object.StaffID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if a == obj.StaffID {
					continue Outer
				}
			}

			args = append(args, obj.StaffID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.staff_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if singular {
		object.R.Orders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.Staff = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StaffID == foreign.StaffID {
				local.R.Orders = append(local.R.Orders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Staff = local
				break
			}
		}
	}

	return nil
}

// LoadManagerStaffs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffL) LoadManagerStaffs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args = append(args, object.StaffID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StaffID) {
					continue Outer
				}
			}

			args = append(args, obj.StaffID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`staffs`),
		qm.WhereIn(`staffs.manager_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load staffs")
	}

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice staffs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on staffs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staffs")
	}

	if singular {
		object.R.ManagerStaffs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &staffR{}
			}
			foreign.R.Manager = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.StaffID, foreign.ManagerID) {
				local.R.ManagerStaffs = append(local.R.ManagerStaffs, foreign)
				if foreign.R == nil {
					foreign.R = &staffR{}
				}
				foreign.R.Manager = local
				break
			}
		}
	}

	return nil
}

// SetManager of the staff to the related item.
// Sets o.R.Manager to related.
// Adds o to related.R.ManagerStaffs.
func (o *Staff) SetManager(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Staff) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"staffs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"manager_id"}),
		strmangle.WhereClause("\"", "\"", 2, staffPrimaryKeyColumns),
	)
	values := []interface{}{related.StaffID, o.StaffID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ManagerID, related.StaffID)
	if o.R == nil {
		o.R = &staffR{
			Manager: related,
		}
	} else {
		o.R.Manager = related
	}

	if related.R == nil {
		related.R = &staffR{
			ManagerStaffs: StaffSlice{o},
		}
	} else {
		related.R.ManagerStaffs = append(related.R.ManagerStaffs, o)
	}

	return nil
}

// RemoveManager relationship.
// Sets o.R.Manager to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Staff) RemoveManager(ctx context.Context, exec boil.ContextExecutor, related *Staff) error {
	var err error

	queries.SetScanner(&o.ManagerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("manager_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Manager = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ManagerStaffs {
		if queries.Equal(o.ManagerID, ri.ManagerID) {
			continue
		}

		ln := len(related.R.ManagerStaffs)
		if ln > 1 && i < ln-1 {
			related.R.ManagerStaffs[i] = related.R.ManagerStaffs[ln-1]
		}
		related.R.ManagerStaffs = related.R.ManagerStaffs[:ln-1]
		break
	}
	return nil
}

// SetStore of the staff to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Staffs.
func (o *Staff) SetStore(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"staffs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"store_id"}),
		strmangle.WhereClause("\"", "\"", 2, staffPrimaryKeyColumns),
	)
	values := []interface{}{related.StoreID, o.StaffID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StoreID = related.StoreID
	if o.R == nil {
		o.R = &staffR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &storeR{
			Staffs: StaffSlice{o},
		}
	} else {
		related.R.Staffs = append(related.R.Staffs, o)
	}

	return nil
}

// AddOrders adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.Staff appropriately.
func (o *Staff) AddOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StaffID = o.StaffID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"staff_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.StaffID, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StaffID = o.StaffID
		}
	}

	if o.R == nil {
		o.R = &staffR{
			Orders: related,
		}
	} else {
		o.R.Orders = append(o.R.Orders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				Staff: o,
			}
		} else {
			rel.R.Staff = o
		}
	}
	return nil
}

// AddManagerStaffs adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.ManagerStaffs.
// Sets related.R.Manager appropriately.
func (o *Staff) AddManagerStaffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Staff) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ManagerID, o.StaffID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"staffs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"manager_id"}),
				strmangle.WhereClause("\"", "\"", 2, staffPrimaryKeyColumns),
			)
			values := []interface{}{o.StaffID, rel.StaffID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ManagerID, o.StaffID)
		}
	}

	if o.R == nil {
		o.R = &staffR{
			ManagerStaffs: related,
		}
	} else {
		o.R.ManagerStaffs = append(o.R.ManagerStaffs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &staffR{
				Manager: o,
			}
		} else {
			rel.R.Manager = o
		}
	}
	return nil
}

// SetManagerStaffs removes all previously related items of the
// staff replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Manager's ManagerStaffs accordingly.
// Replaces o.R.ManagerStaffs with related.
// Sets related.R.Manager's ManagerStaffs accordingly.
func (o *Staff) SetManagerStaffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Staff) error {
	query := "update \"staffs\" set \"manager_id\" = null where \"manager_id\" = $1"
	values := []interface{}{o.StaffID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ManagerStaffs {
			queries.SetScanner(&rel.ManagerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Manager = nil
		}

		o.R.ManagerStaffs = nil
	}
	return o.AddManagerStaffs(ctx, exec, insert, related...)
}

// RemoveManagerStaffs relationships from objects passed in.
// Removes related items from R.ManagerStaffs (uses pointer comparison, removal does not keep order)
// Sets related.R.Manager.
func (o *Staff) RemoveManagerStaffs(ctx context.Context, exec boil.ContextExecutor, related ...*Staff) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ManagerID, nil)
		if rel.R != nil {
			rel.R.Manager = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("manager_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ManagerStaffs {
			if rel != ri {
				continue
			}

			ln := len(o.R.ManagerStaffs)
			if ln > 1 && i < ln-1 {
				o.R.ManagerStaffs[i] = o.R.ManagerStaffs[ln-1]
			}
			o.R.ManagerStaffs = o.R.ManagerStaffs[:ln-1]
			break
		}
	}

	return nil
}

// Staffs retrieves all the records using an executor.
func Staffs(mods ...qm.QueryMod) staffQuery {
	mods = append(mods, qm.From("\"staffs\""))
	return staffQuery{NewQuery(mods...)}
}

// FindStaff retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStaff(ctx context.Context, exec boil.ContextExecutor, staffID int, selectCols ...string) (*Staff, error) {
	staffObj := &Staff{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"staffs\" where \"staff_id\"=$1", sel,
	)

	q := queries.Raw(query, staffID)

	err := q.Bind(ctx, exec, staffObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from staffs")
	}

	return staffObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Staff) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no staffs provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	staffInsertCacheMut.RLock()
	cache, cached := staffInsertCache[key]
	staffInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(staffType, staffMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"staffs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"staffs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into staffs")
	}

	if !cached {
		staffInsertCacheMut.Lock()
		staffInsertCache[key] = cache
		staffInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Staff.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Staff) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	staffUpdateCacheMut.RLock()
	cache, cached := staffUpdateCache[key]
	staffUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update staffs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"staffs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, staffPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, append(wl, staffPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update staffs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for staffs")
	}

	if !cached {
		staffUpdateCacheMut.Lock()
		staffUpdateCache[key] = cache
		staffUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q staffQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for staffs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StaffSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"staffs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, staffPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in staff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all staff")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Staff) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no staffs provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	staffUpsertCacheMut.RLock()
	cache, cached := staffUpsertCache[key]
	staffUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert staffs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(staffPrimaryKeyColumns))
			copy(conflict, staffPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"staffs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(staffType, staffMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert staffs")
	}

	if !cached {
		staffUpsertCacheMut.Lock()
		staffUpsertCache[key] = cache
		staffUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Staff record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Staff) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Staff provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), staffPrimaryKeyMapping)
	sql := "DELETE FROM \"staffs\" WHERE \"staff_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for staffs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q staffQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no staffQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for staffs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StaffSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"staffs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, staffPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from staff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for staffs")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Staff) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStaff(ctx, exec, o.StaffID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StaffSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"staffs\".* FROM \"staffs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, staffPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StaffSlice")
	}

	*o = slice

	return nil
}

// StaffExists checks if the Staff row exists.
func StaffExists(ctx context.Context, exec boil.ContextExecutor, staffID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"staffs\" where \"staff_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, staffID)
	}
	row := exec.QueryRowContext(ctx, sql, staffID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if staffs exists")
	}

	return exists, nil
}
