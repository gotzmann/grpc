// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Brands", testBrands)
	t.Run("Categories", testCategories)
	t.Run("Customers", testCustomers)
	t.Run("OrderItems", testOrderItems)
	t.Run("Orders", testOrders)
	t.Run("Products", testProducts)
	t.Run("Staffs", testStaffs)
	t.Run("Stocks", testStocks)
	t.Run("Stores", testStores)
}

func TestDelete(t *testing.T) {
	t.Run("Brands", testBrandsDelete)
	t.Run("Categories", testCategoriesDelete)
	t.Run("Customers", testCustomersDelete)
	t.Run("OrderItems", testOrderItemsDelete)
	t.Run("Orders", testOrdersDelete)
	t.Run("Products", testProductsDelete)
	t.Run("Staffs", testStaffsDelete)
	t.Run("Stocks", testStocksDelete)
	t.Run("Stores", testStoresDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Brands", testBrandsQueryDeleteAll)
	t.Run("Categories", testCategoriesQueryDeleteAll)
	t.Run("Customers", testCustomersQueryDeleteAll)
	t.Run("OrderItems", testOrderItemsQueryDeleteAll)
	t.Run("Orders", testOrdersQueryDeleteAll)
	t.Run("Products", testProductsQueryDeleteAll)
	t.Run("Staffs", testStaffsQueryDeleteAll)
	t.Run("Stocks", testStocksQueryDeleteAll)
	t.Run("Stores", testStoresQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Brands", testBrandsSliceDeleteAll)
	t.Run("Categories", testCategoriesSliceDeleteAll)
	t.Run("Customers", testCustomersSliceDeleteAll)
	t.Run("OrderItems", testOrderItemsSliceDeleteAll)
	t.Run("Orders", testOrdersSliceDeleteAll)
	t.Run("Products", testProductsSliceDeleteAll)
	t.Run("Staffs", testStaffsSliceDeleteAll)
	t.Run("Stocks", testStocksSliceDeleteAll)
	t.Run("Stores", testStoresSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Brands", testBrandsExists)
	t.Run("Categories", testCategoriesExists)
	t.Run("Customers", testCustomersExists)
	t.Run("OrderItems", testOrderItemsExists)
	t.Run("Orders", testOrdersExists)
	t.Run("Products", testProductsExists)
	t.Run("Staffs", testStaffsExists)
	t.Run("Stocks", testStocksExists)
	t.Run("Stores", testStoresExists)
}

func TestFind(t *testing.T) {
	t.Run("Brands", testBrandsFind)
	t.Run("Categories", testCategoriesFind)
	t.Run("Customers", testCustomersFind)
	t.Run("OrderItems", testOrderItemsFind)
	t.Run("Orders", testOrdersFind)
	t.Run("Products", testProductsFind)
	t.Run("Staffs", testStaffsFind)
	t.Run("Stocks", testStocksFind)
	t.Run("Stores", testStoresFind)
}

func TestBind(t *testing.T) {
	t.Run("Brands", testBrandsBind)
	t.Run("Categories", testCategoriesBind)
	t.Run("Customers", testCustomersBind)
	t.Run("OrderItems", testOrderItemsBind)
	t.Run("Orders", testOrdersBind)
	t.Run("Products", testProductsBind)
	t.Run("Staffs", testStaffsBind)
	t.Run("Stocks", testStocksBind)
	t.Run("Stores", testStoresBind)
}

func TestOne(t *testing.T) {
	t.Run("Brands", testBrandsOne)
	t.Run("Categories", testCategoriesOne)
	t.Run("Customers", testCustomersOne)
	t.Run("OrderItems", testOrderItemsOne)
	t.Run("Orders", testOrdersOne)
	t.Run("Products", testProductsOne)
	t.Run("Staffs", testStaffsOne)
	t.Run("Stocks", testStocksOne)
	t.Run("Stores", testStoresOne)
}

func TestAll(t *testing.T) {
	t.Run("Brands", testBrandsAll)
	t.Run("Categories", testCategoriesAll)
	t.Run("Customers", testCustomersAll)
	t.Run("OrderItems", testOrderItemsAll)
	t.Run("Orders", testOrdersAll)
	t.Run("Products", testProductsAll)
	t.Run("Staffs", testStaffsAll)
	t.Run("Stocks", testStocksAll)
	t.Run("Stores", testStoresAll)
}

func TestCount(t *testing.T) {
	t.Run("Brands", testBrandsCount)
	t.Run("Categories", testCategoriesCount)
	t.Run("Customers", testCustomersCount)
	t.Run("OrderItems", testOrderItemsCount)
	t.Run("Orders", testOrdersCount)
	t.Run("Products", testProductsCount)
	t.Run("Staffs", testStaffsCount)
	t.Run("Stocks", testStocksCount)
	t.Run("Stores", testStoresCount)
}

func TestInsert(t *testing.T) {
	t.Run("Brands", testBrandsInsert)
	t.Run("Brands", testBrandsInsertWhitelist)
	t.Run("Categories", testCategoriesInsert)
	t.Run("Categories", testCategoriesInsertWhitelist)
	t.Run("Customers", testCustomersInsert)
	t.Run("Customers", testCustomersInsertWhitelist)
	t.Run("OrderItems", testOrderItemsInsert)
	t.Run("OrderItems", testOrderItemsInsertWhitelist)
	t.Run("Orders", testOrdersInsert)
	t.Run("Orders", testOrdersInsertWhitelist)
	t.Run("Products", testProductsInsert)
	t.Run("Products", testProductsInsertWhitelist)
	t.Run("Staffs", testStaffsInsert)
	t.Run("Staffs", testStaffsInsertWhitelist)
	t.Run("Stocks", testStocksInsert)
	t.Run("Stocks", testStocksInsertWhitelist)
	t.Run("Stores", testStoresInsert)
	t.Run("Stores", testStoresInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("OrderItemToOrderUsingOrder", testOrderItemToOneOrderUsingOrder)
	t.Run("OrderItemToProductUsingProduct", testOrderItemToOneProductUsingProduct)
	t.Run("OrderToCustomerUsingCustomer", testOrderToOneCustomerUsingCustomer)
	t.Run("OrderToStaffUsingStaff", testOrderToOneStaffUsingStaff)
	t.Run("OrderToStoreUsingStore", testOrderToOneStoreUsingStore)
	t.Run("ProductToBrandUsingBrand", testProductToOneBrandUsingBrand)
	t.Run("ProductToCategoryUsingCategory", testProductToOneCategoryUsingCategory)
	t.Run("StaffToStaffUsingManager", testStaffToOneStaffUsingManager)
	t.Run("StaffToStoreUsingStore", testStaffToOneStoreUsingStore)
	t.Run("StockToProductUsingProduct", testStockToOneProductUsingProduct)
	t.Run("StockToStoreUsingStore", testStockToOneStoreUsingStore)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("BrandToProducts", testBrandToManyProducts)
	t.Run("CategoryToProducts", testCategoryToManyProducts)
	t.Run("CustomerToOrders", testCustomerToManyOrders)
	t.Run("OrderToOrderItems", testOrderToManyOrderItems)
	t.Run("ProductToOrderItems", testProductToManyOrderItems)
	t.Run("ProductToStocks", testProductToManyStocks)
	t.Run("StaffToOrders", testStaffToManyOrders)
	t.Run("StaffToManagerStaffs", testStaffToManyManagerStaffs)
	t.Run("StoreToOrders", testStoreToManyOrders)
	t.Run("StoreToStaffs", testStoreToManyStaffs)
	t.Run("StoreToStocks", testStoreToManyStocks)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("OrderItemToOrderUsingOrderItems", testOrderItemToOneSetOpOrderUsingOrder)
	t.Run("OrderItemToProductUsingOrderItems", testOrderItemToOneSetOpProductUsingProduct)
	t.Run("OrderToCustomerUsingOrders", testOrderToOneSetOpCustomerUsingCustomer)
	t.Run("OrderToStaffUsingOrders", testOrderToOneSetOpStaffUsingStaff)
	t.Run("OrderToStoreUsingOrders", testOrderToOneSetOpStoreUsingStore)
	t.Run("ProductToBrandUsingProducts", testProductToOneSetOpBrandUsingBrand)
	t.Run("ProductToCategoryUsingProducts", testProductToOneSetOpCategoryUsingCategory)
	t.Run("StaffToStaffUsingManagerStaffs", testStaffToOneSetOpStaffUsingManager)
	t.Run("StaffToStoreUsingStaffs", testStaffToOneSetOpStoreUsingStore)
	t.Run("StockToProductUsingStocks", testStockToOneSetOpProductUsingProduct)
	t.Run("StockToStoreUsingStocks", testStockToOneSetOpStoreUsingStore)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("OrderToCustomerUsingOrders", testOrderToOneRemoveOpCustomerUsingCustomer)
	t.Run("StaffToStaffUsingManagerStaffs", testStaffToOneRemoveOpStaffUsingManager)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("BrandToProducts", testBrandToManyAddOpProducts)
	t.Run("CategoryToProducts", testCategoryToManyAddOpProducts)
	t.Run("CustomerToOrders", testCustomerToManyAddOpOrders)
	t.Run("OrderToOrderItems", testOrderToManyAddOpOrderItems)
	t.Run("ProductToOrderItems", testProductToManyAddOpOrderItems)
	t.Run("ProductToStocks", testProductToManyAddOpStocks)
	t.Run("StaffToOrders", testStaffToManyAddOpOrders)
	t.Run("StaffToManagerStaffs", testStaffToManyAddOpManagerStaffs)
	t.Run("StoreToOrders", testStoreToManyAddOpOrders)
	t.Run("StoreToStaffs", testStoreToManyAddOpStaffs)
	t.Run("StoreToStocks", testStoreToManyAddOpStocks)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("CustomerToOrders", testCustomerToManySetOpOrders)
	t.Run("StaffToManagerStaffs", testStaffToManySetOpManagerStaffs)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("CustomerToOrders", testCustomerToManyRemoveOpOrders)
	t.Run("StaffToManagerStaffs", testStaffToManyRemoveOpManagerStaffs)
}

func TestReload(t *testing.T) {
	t.Run("Brands", testBrandsReload)
	t.Run("Categories", testCategoriesReload)
	t.Run("Customers", testCustomersReload)
	t.Run("OrderItems", testOrderItemsReload)
	t.Run("Orders", testOrdersReload)
	t.Run("Products", testProductsReload)
	t.Run("Staffs", testStaffsReload)
	t.Run("Stocks", testStocksReload)
	t.Run("Stores", testStoresReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Brands", testBrandsReloadAll)
	t.Run("Categories", testCategoriesReloadAll)
	t.Run("Customers", testCustomersReloadAll)
	t.Run("OrderItems", testOrderItemsReloadAll)
	t.Run("Orders", testOrdersReloadAll)
	t.Run("Products", testProductsReloadAll)
	t.Run("Staffs", testStaffsReloadAll)
	t.Run("Stocks", testStocksReloadAll)
	t.Run("Stores", testStoresReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Brands", testBrandsSelect)
	t.Run("Categories", testCategoriesSelect)
	t.Run("Customers", testCustomersSelect)
	t.Run("OrderItems", testOrderItemsSelect)
	t.Run("Orders", testOrdersSelect)
	t.Run("Products", testProductsSelect)
	t.Run("Staffs", testStaffsSelect)
	t.Run("Stocks", testStocksSelect)
	t.Run("Stores", testStoresSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Brands", testBrandsUpdate)
	t.Run("Categories", testCategoriesUpdate)
	t.Run("Customers", testCustomersUpdate)
	t.Run("OrderItems", testOrderItemsUpdate)
	t.Run("Orders", testOrdersUpdate)
	t.Run("Products", testProductsUpdate)
	t.Run("Staffs", testStaffsUpdate)
	t.Run("Stocks", testStocksUpdate)
	t.Run("Stores", testStoresUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Brands", testBrandsSliceUpdateAll)
	t.Run("Categories", testCategoriesSliceUpdateAll)
	t.Run("Customers", testCustomersSliceUpdateAll)
	t.Run("OrderItems", testOrderItemsSliceUpdateAll)
	t.Run("Orders", testOrdersSliceUpdateAll)
	t.Run("Products", testProductsSliceUpdateAll)
	t.Run("Staffs", testStaffsSliceUpdateAll)
	t.Run("Stocks", testStocksSliceUpdateAll)
	t.Run("Stores", testStoresSliceUpdateAll)
}
