// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrderItems(t *testing.T) {
	t.Parallel()

	query := OrderItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrderItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrderItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrderItemExists(ctx, tx, o.OrderID, o.ItemID)
	if err != nil {
		t.Errorf("Unable to check if OrderItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrderItemExists to return true, but got false.")
	}
}

func testOrderItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orderItemFound, err := FindOrderItem(ctx, tx, o.OrderID, o.ItemID)
	if err != nil {
		t.Error(err)
	}

	if orderItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrderItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrderItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrderItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrderItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrderItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderItemOne := &OrderItem{}
	orderItemTwo := &OrderItem{}
	if err = randomize.Struct(seed, orderItemOne, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}
	if err = randomize.Struct(seed, orderItemTwo, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrderItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orderItemOne := &OrderItem{}
	orderItemTwo := &OrderItem{}
	if err = randomize.Struct(seed, orderItemOne, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}
	if err = randomize.Struct(seed, orderItemTwo, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testOrderItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orderItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderItemToOneOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderItem
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrderID = foreign.OrderID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.OrderID != foreign.OrderID {
		t.Errorf("want: %v, got %v", foreign.OrderID, check.OrderID)
	}

	slice := OrderItemSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*OrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrderItemToOneProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderItem
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProductID = foreign.ProductID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ProductID != foreign.ProductID {
		t.Errorf("want: %v, got %v", foreign.ProductID, check.ProductID)
	}

	slice := OrderItemSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*OrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrderItemToOneSetOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItem
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrderID != x.OrderID {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		if exists, err := OrderItemExists(ctx, tx, a.OrderID, a.ItemID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testOrderItemToOneSetOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItem
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProductID != x.ProductID {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProductID != x.ProductID {
			t.Error("foreign key was wrong value", a.ProductID, x.ProductID)
		}
	}
}

func testOrderItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orderItemDBTypes = map[string]string{`OrderID`: `integer`, `ItemID`: `integer`, `ProductID`: `integer`, `Quantity`: `integer`, `ListPrice`: `numeric`, `Discount`: `numeric`}
	_                = bytes.MinRead
)

func testOrderItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orderItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orderItemAllColumns) == len(orderItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrderItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orderItemAllColumns) == len(orderItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orderItemAllColumns, orderItemPrimaryKeyColumns) {
		fields = orderItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			orderItemAllColumns,
			orderItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrderItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrderItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(orderItemAllColumns) == len(orderItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrderItem{}
	if err = randomize.Struct(seed, &o, orderItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrderItem: %s", err)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, orderItemDBTypes, false, orderItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrderItem: %s", err)
	}

	count, err = OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
