// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStaffs(t *testing.T) {
	t.Parallel()

	query := Staffs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStaffsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaffsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Staffs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaffsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StaffSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaffsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StaffExists(ctx, tx, o.StaffID)
	if err != nil {
		t.Errorf("Unable to check if Staff exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StaffExists to return true, but got false.")
	}
}

func testStaffsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	staffFound, err := FindStaff(ctx, tx, o.StaffID)
	if err != nil {
		t.Error(err)
	}

	if staffFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStaffsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Staffs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStaffsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Staffs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStaffsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	staffOne := &Staff{}
	staffTwo := &Staff{}
	if err = randomize.Struct(seed, staffOne, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}
	if err = randomize.Struct(seed, staffTwo, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = staffOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = staffTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Staffs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStaffsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	staffOne := &Staff{}
	staffTwo := &Staff{}
	if err = randomize.Struct(seed, staffOne, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}
	if err = randomize.Struct(seed, staffTwo, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = staffOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = staffTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testStaffsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStaffsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(staffColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStaffToManyOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.StaffID = a.StaffID
	c.StaffID = a.StaffID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Orders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.StaffID == b.StaffID {
			bFound = true
		}
		if v.StaffID == c.StaffID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StaffSlice{&a}
	if err = a.L.LoadOrders(ctx, tx, false, (*[]*Staff)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Orders = nil
	if err = a.L.LoadOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStaffToManyManagerStaffs(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ManagerID, a.StaffID)
	queries.Assign(&c.ManagerID, a.StaffID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ManagerStaffs().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ManagerID, b.ManagerID) {
			bFound = true
		}
		if queries.Equal(v.ManagerID, c.ManagerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StaffSlice{&a}
	if err = a.L.LoadManagerStaffs(ctx, tx, false, (*[]*Staff)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ManagerStaffs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ManagerStaffs = nil
	if err = a.L.LoadManagerStaffs(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ManagerStaffs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStaffToManyAddOpOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Order{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.StaffID != first.StaffID {
			t.Error("foreign key was wrong value", a.StaffID, first.StaffID)
		}
		if a.StaffID != second.StaffID {
			t.Error("foreign key was wrong value", a.StaffID, second.StaffID)
		}

		if first.R.Staff != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Staff != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Orders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Orders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Orders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStaffToManyAddOpManagerStaffs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Staff{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Staff{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddManagerStaffs(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.StaffID, first.ManagerID) {
			t.Error("foreign key was wrong value", a.StaffID, first.ManagerID)
		}
		if !queries.Equal(a.StaffID, second.ManagerID) {
			t.Error("foreign key was wrong value", a.StaffID, second.ManagerID)
		}

		if first.R.Manager != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Manager != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ManagerStaffs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ManagerStaffs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ManagerStaffs().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStaffToManySetOpManagerStaffs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Staff{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetManagerStaffs(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ManagerStaffs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetManagerStaffs(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ManagerStaffs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ManagerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ManagerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.StaffID, d.ManagerID) {
		t.Error("foreign key was wrong value", a.StaffID, d.ManagerID)
	}
	if !queries.Equal(a.StaffID, e.ManagerID) {
		t.Error("foreign key was wrong value", a.StaffID, e.ManagerID)
	}

	if b.R.Manager != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Manager != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Manager != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Manager != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ManagerStaffs[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ManagerStaffs[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStaffToManyRemoveOpManagerStaffs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Staff{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddManagerStaffs(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ManagerStaffs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveManagerStaffs(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ManagerStaffs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ManagerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ManagerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Manager != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Manager != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Manager != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Manager != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ManagerStaffs) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ManagerStaffs[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ManagerStaffs[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStaffToOneStaffUsingManager(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Staff
	var foreign Staff

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ManagerID, foreign.StaffID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Manager().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.StaffID, foreign.StaffID) {
		t.Errorf("want: %v, got %v", foreign.StaffID, check.StaffID)
	}

	slice := StaffSlice{&local}
	if err = local.L.LoadManager(ctx, tx, false, (*[]*Staff)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Manager == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Manager = nil
	if err = local.L.LoadManager(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Manager == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStaffToOneStoreUsingStore(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Staff
	var foreign Store

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, storeDBTypes, false, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.StoreID = foreign.StoreID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Store().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.StoreID != foreign.StoreID {
		t.Errorf("want: %v, got %v", foreign.StoreID, check.StoreID)
	}

	slice := StaffSlice{&local}
	if err = local.L.LoadStore(ctx, tx, false, (*[]*Staff)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Store == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Store = nil
	if err = local.L.LoadStore(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Store == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStaffToOneSetOpStaffUsingManager(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Staff{&b, &c} {
		err = a.SetManager(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Manager != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ManagerStaffs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ManagerID, x.StaffID) {
			t.Error("foreign key was wrong value", a.ManagerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ManagerID))
		reflect.Indirect(reflect.ValueOf(&a.ManagerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ManagerID, x.StaffID) {
			t.Error("foreign key was wrong value", a.ManagerID, x.StaffID)
		}
	}
}

func testStaffToOneRemoveOpStaffUsingManager(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetManager(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveManager(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Manager().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Manager != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ManagerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ManagerStaffs) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testStaffToOneSetOpStoreUsingStore(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c Store

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Store{&b, &c} {
		err = a.SetStore(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Store != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Staffs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StoreID != x.StoreID {
			t.Error("foreign key was wrong value", a.StoreID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StoreID))
		reflect.Indirect(reflect.ValueOf(&a.StoreID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.StoreID != x.StoreID {
			t.Error("foreign key was wrong value", a.StoreID, x.StoreID)
		}
	}
}

func testStaffsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStaffsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StaffSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStaffsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Staffs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	staffDBTypes = map[string]string{`StaffID`: `integer`, `FirstName`: `character varying`, `LastName`: `character varying`, `Email`: `character varying`, `Phone`: `character varying`, `Active`: `integer`, `StoreID`: `integer`, `ManagerID`: `integer`}
	_            = bytes.MinRead
)

func testStaffsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(staffPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(staffAllColumns) == len(staffPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, staffDBTypes, true, staffPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStaffsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(staffAllColumns) == len(staffPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, staffDBTypes, true, staffPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(staffAllColumns, staffPrimaryKeyColumns) {
		fields = staffAllColumns
	} else {
		fields = strmangle.SetComplement(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StaffSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStaffsUpsert(t *testing.T) {
	t.Parallel()

	if len(staffAllColumns) == len(staffPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Staff{}
	if err = randomize.Struct(seed, &o, staffDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Staff: %s", err)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, staffDBTypes, false, staffPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Staff: %s", err)
	}

	count, err = Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
